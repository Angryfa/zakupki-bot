import os
import time
import json
import requests
from datetime import datetime, timedelta
from flask import Flask, render_template, request, jsonify

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Flask
app = Flask(__name__)

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± SSL
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

class ZakupkiBot:
    def __init__(self, data):
        self.client = requests.Session()
        self.client.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
            'X-Requested-With': 'XMLHttpRequest',
            'Content-Type': 'application/json; charset=utf-8',
            'Authorization': f'Bearer {data["token"]}'
        })
        self.base_url = "https://zakupki.mos.ru/newapi/api/EntityOperation"
        self.need_id = data["need_id"]
        self.end_date = data["end_date"]
        self.nds_rate_id = data["nds_rate_id"]
        self.cost_per_unit = data["cost_per_unit"]
        self.supplier_id = self.get_supplier_id()
        self.started_operation_log_id = None

    def get_supplier_id(self):
        """ –ü–æ–ª—É—á–∞–µ—Ç supplier_id —á–µ—Ä–µ–∑ –¥–≤–∞ –∑–∞–ø—Ä–æ—Å–∞ """
        auth_url = "https://old.zakupki.mos.ru/api/Cssp/Authentication/CheckAuthentication"
        company_url = "https://old.zakupki.mos.ru/api/Cssp/Company/GetFullEntity?companyId={}"

        print("üîÑ –ü–æ–ª—É—á–∞–µ–º companyId...")
        auth_response = self.client.get(auth_url, verify=False)
      #   print(f"üìå –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (CheckAuthentication): {auth_response.text}")

        try:
            auth_data = auth_response.json()
        except json.JSONDecodeError:
            print("‚ùå –û—à–∏–±–∫–∞ JSON (CheckAuthentication)")
            return None

        if auth_response.status_code == 200 and auth_data.get("isAuthenticated"):
            company_id = auth_data["user"]["company"]["id"]
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω companyId: {company_id}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {auth_response.text}")
            return None

        print("üîÑ –ü–æ–ª—É—á–∞–µ–º supplierId...")
        company_response = self.client.get(company_url.format(company_id), verify=False)

        try:
            company_data = company_response.json()
        except json.JSONDecodeError:
            print("‚ùå –û—à–∏–±–∫–∞ JSON (GetFullEntity)")
            return None

        if company_response.status_code == 200:
            supplier_id = company_data.get("supplierId")
            if supplier_id:
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω supplierId: {supplier_id}")
                return supplier_id
            else:
                print("‚ùå SupplierId –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return None
        else:
            return None

    def fetch_need_details(self):
        """ –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ 'need' (–≤–∫–ª—é—á–∞—è costPerUnit –∏ proposalEndDate) """
        url = f"https://zakupki.mos.ru/newapi/api/Need/Get?needId={self.need_id}"
        response = self.client.get(url, verify=False)

        try:
            data = response.json()
        except json.JSONDecodeError:
            print("‚ùå –û—à–∏–±–∫–∞ JSON (Fetch Need Details)")
            return None 

        if response.status_code == 200:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è costPerUnit
            cost_per_unit_list = [item["costPerUnit"] for item in data.get("items", [])]
            proposal_end_date = data.get("proposalEndDate")

            print("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: ")
            print("---‚úÖ Cost Per Unit:", cost_per_unit_list)
            print("---‚úÖ Proposal End Date:", proposal_end_date)

            return cost_per_unit_list, proposal_end_date
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}, —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
            return None, None

    def check_time_and_proposal_end(self, proposal_end_date):
        """ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –∏ –µ—Å–ª–∏ –æ–Ω–æ –º–µ–Ω—å—à–µ proposal_end_date - 2 –º–∏–Ω—É—Ç—ã, –Ω–µ –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å """
        current_time = datetime.now()  # –í—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º +3 —á–∞—Å–æ–≤

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º proposal_end_date –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ datetime
        proposal_end_date = datetime.strptime(proposal_end_date, "%d.%m.%Y %H:%M:%S")

        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è
        if current_time >= proposal_end_date - timedelta(minutes=2) or True:
            print("‚úÖ –í—Ä–µ–º—è –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞.")
            return True
        else:
            print(f"‚ùå –í—Ä–µ–º—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞. –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –≤: {proposal_end_date}.")
            return False

    def create_operation_entity(self):
        """ –°–æ–∑–¥–∞–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏ """
        url = f"{self.base_url}/CreateNewOperationEntity/8ab79a58-b8d4-494e-a0ec-bbb3b2e781f4"
        payload = {"creationData": {"needId": self.need_id, "supplierId": self.supplier_id}}

        response = self.client.post(url, json=payload, verify=False)
        try:
            data = response.json()
        except json.JSONDecodeError:
            print(f"‚ùå –û—à–∏–±–∫–∞ JSON (CreateNewOperationEntity): {response.text}")
            return None

        print(f"üìå –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (Create Operation): {data}")

        if response.status_code == 200:
            if isinstance(data, dict):
                entity_id = data.get("entityId")
                if entity_id:
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏, entityId: {entity_id}")
                    return entity_id
            elif isinstance(data, (str, int)):
                print(f"‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª entityId –∫–∞–∫ —á–∏—Å–ª–æ: {data}")
                return str(data)
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞: {data}")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}, —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: {response.text}")
            return None

    def start_operation(self, entity_id):
        """ –ó–∞–ø—É—Å–∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ """
        url = f"{self.base_url}/StartOperation/8ab79a58-b8d4-494e-a0ec-bbb3b2e781f4"
        payload = {"entityId": entity_id, "operationId": "aa31f4c6-c31d-4012-ae99-2afeda2e24f7"}

        response = self.client.post(url, json=payload, verify=False)
        print(f"üìå –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (StartOperation): {response.text}")

        try:
            data = response.json()
        except json.JSONDecodeError:
            return None

        if response.status_code == 200:
            self.started_operation_log_id = data.get("startedOperationLogId")
            entity_version_id = data.get("entityVersionId")
            print(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞, startedOperationLogId: {self.started_operation_log_id}")
            return entity_version_id
        return None

    def save_started_operation(self, entity_id,cost_per_unit_list):
        """ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ """
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–Ω–æ—Å—Ç–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º entityId
        get_started_operation_url = f"{self.base_url}/GetStartedOperation/8ab79a58-b8d4-494e-a0ec-bbb3b2e781f4?query"
        get_started_operation_payload = {"entityId": entity_id}

        get_started_operation_response = self.client.post(get_started_operation_url, json=get_started_operation_payload, verify=False)

        try:
            started_operation_data = get_started_operation_response.json()
        except json.JSONDecodeError:
            print("‚ùå –û—à–∏–±–∫–∞ JSON (GetStartedOperation)")
            return None

        if get_started_operation_response.status_code == 200:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º needItem, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            need_item = started_operation_data.get("editingEntity", {}).get("needItem", [])
            if need_item:
                item_ids = [item.get("id") for item in need_item if item.get("id")]  # –°–ø–∏—Å–æ–∫ itemId
                if item_ids:
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã itemIds: {item_ids}")
                else:
                    print("‚ùå itemId –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                    return None
            else:
                print("‚ùå needItem –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return None
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ {get_started_operation_response.status_code} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ StartedOperation")
            return None

        # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ itemIds –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        url = f"{self.base_url}/SaveStartedOperation/8ab79a58-b8d4-494e-a0ec-bbb3b2e781f4"
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º payload –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö items
        need_item_offer = []
        for idx, item_id in enumerate(item_ids):
            if idx < len(cost_per_unit_list):
               cost_per_unit = cost_per_unit_list[idx]
            else:
               cost_per_unit = 0
            print(f"üìå –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (—Ü–µ–Ω–∞ –∞–π—Ç–µ–º–∞): {cost_per_unit}"),
            need_item_offer.append({
                "itemId": item_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π itemId
                "needSupplierId": entity_id,
                "costPerUnit": cost_per_unit,
                
                "amountWithNds": 0,
                "ndsRateId": self.nds_rate_id
            })

         

        payload = {
            "startedOperationLogId": self.started_operation_log_id,
            "editingEntity": {
                "endDate": self.end_date,
                "needId": self.need_id,
                "supplierId": self.supplier_id,
                "needItemOffer": need_item_offer,  # –ó–¥–µ—Å—å –º—ã –ø–µ—Ä–µ–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ needItemOffer
                "entityId": entity_id,
                "signer": {
                  "withoutPatronymic": False,
                  "givenName": "–ì–µ–æ—Ä–≥–∏–π",
                  "familyName": "–û—Å–º–∏–Ω–∏–Ω",
                  "patronymic": "–ì–µ–æ—Ä–≥–∏–µ–≤–∏—á",
                  "position": "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä",
                  "powerOfAttorney": {
                     "name": "–£—Å—Ç–∞–≤",
                     "number": "–Ω–µ—Ç",
                     "startDate": "16.07.2021 00:00:00",
                  }
                 }
                }
            }
        

        response = self.client.post(url, json=payload, verify=False)
        print(f"üìå –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (SaveStartedOperation): {response.text}")

        try:
            return response.json()
        except json.JSONDecodeError:
            print("‚ùå –û—à–∏–±–∫–∞ JSON (SaveStartedOperation)")
            return None

    def finish_operation(self):
        """ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ """
        url = f"{self.base_url}/FinishOperation/8ab79a58-b8d4-494e-a0ec-bbb3b2e781f4"
        payload = {"startedOperationLogId": self.started_operation_log_id}

        response = self.client.post(url, json=payload, verify=False)
        print(f"üìå –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (FinishOperation): {response.text}")

        if response.status_code == 200 and response.text == "{}":
            print("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
            return False

    def make_purchase(self):
        """ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è—é—â–∞—è –≤—Å–µ —à–∞–≥–∏ –ø–æ–∫—É–ø–∫–∏ """
        cost_per_unit_list, proposal_end_date = self.fetch_need_details()
        if not cost_per_unit_list or not proposal_end_date:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∫—É–ø–∫–∏.")
            return None
        print(f"üìå –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–π—Ç–µ–º–æ–≤: {cost_per_unit_list}")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤—Ä–µ–º—è
        if not self.check_time_and_proposal_end(proposal_end_date):
            return None

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      #   self.cost_per_unit = cost_per_unit_list[0] if cost_per_unit_list else self.cost_per_unit
        current_date = datetime.now()
        new_end_date = current_date + timedelta(days=30)
        self.end_date = new_end_date.strftime("%d.%m.%Y %H:%M:%S")
        print(f"üìÖ –ù–æ–≤—ã–π end_date: {self.end_date}")

        entity_id = self.create_operation_entity()
        if not entity_id:
            return None
        time.sleep(2)

        entity_version_id = self.start_operation(entity_id)
        if not entity_version_id:
            return None

        time.sleep(2)

        self.save_started_operation(entity_id,cost_per_unit_list)

        time.sleep(2)

        return self.finish_operation()

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
@app.route('/')
def index():
    return render_template('index.html')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
@app.route('/start_bot', methods=['POST'])
def start_bot():
    need_id = request.form.get('need_id')
    
    data = {
        "token": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJwbDgxLVYyWUNyQ1V0bmVRTWxxRUNmSVluS1Z3VExnQVIwZXhiTkF1SF9nIn0.eyJleHAiOjIwNTUwNjQzNDMsImlhdCI6MTczOTcwNTg5MywiYXV0aF90aW1lIjoxNzM5NzA0MzQzLCJqdGkiOiJhN2E1NzRkMi0yMTBjLTQxNDktYmM0Ni1iMjNmNGI3MWQwMzkiLCJpc3MiOiJodHRwczovL3pha3Vwa2kubW9zLnJ1L2F1dGgvcmVhbG1zL1BwUmVhbG0iLCJhdWQiOiJJbnRlZ3JhdGlvbkFwcCIsInN1YiI6IjdhZDUwNmY5LTM5Y2EtNGNhOC04YmZiLWY0MzE1MjNhYzJiMSIsInR5cCI6IkJlYXJlciIsImF6cCI6IlBwQXBwIiwic2Vzc2lvbl9zdGF0ZSI6IjU3OTY0Njk3LTJlNTItNGQ0Ni04NTBhLTA1YjRlZWZlNmQzMSIsInNjb3BlIjoiSW50ZWdyYXRpb25TY29wZSIsInNpZCI6IjU3OTY0Njk3LTJlNTItNGQ0Ni04NTBhLTA1YjRlZWZlNmQzMSJ9.UXsHSF3UAM9UBq9-yq7_D9UkYs9w6CaXwdVQa_p1YkRhxRXgwY0F2CRaLDuRSp2_m0Kr5D7lHJ8BXvqHd0RFPNNMrtGbK6ULwGevNwQb719IxdlZV69vzyDpJSyLOlgVxikgEAr4H9sYYsmCGaVD6vxvvNvUVdO8UlB82OgpNhI4Bmylh6TETznN1Rgh20D4GGj8Hox70I9l6ciUVN1B0nFaBupwnv4BVAIw-z2QqfpHrf2cLjpl5UE78a2prRQR7tN-NeHQrNYvzxj0SVkVRg30dqJ0iNWEeaHwDIJqEd7LkBv8t8aChKxFMf528DlxDb15uo5n2cJni-oAdRuu9w",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
        "need_id": need_id,
        "end_date": "0",
        "nds_rate_id": 4,
        "cost_per_unit": 0
    }

    bot = ZakupkiBot(data)
    purchase_result = bot.make_purchase()

    # –ï—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞
    if purchase_result:
        return jsonify({"status": "success", "message": "üéâ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"})
    else:
        return jsonify({"status": "error", "message": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–∫—É–ø–∫–∏."})

if __name__ == '__main__':
    app.run(debug=True)
